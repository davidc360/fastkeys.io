{"version":3,"sources":["components/Game.module.sass","components/EndGame.module.sass","ducks/middleware/middleware.js","ducks/modules/game.js","ducks/modules/settings.js","ducks/store.js","components/shared/helpers.js","components/WordDisplay.js","components/shared/InfIcon.js","components/Settings.js","components/Stats.js","components/EndGame.js","components/Game.js","App.js","serviceWorker.js","index.js","components/Settings.module.sass","components/WordDisplay.module.sass","components/Stats.module.sass"],"names":["module","exports","interval","initCorNum","whole","partial","initCorNums","current","last","initIncLetSet","typed","targeted","initIncLet","nonForget","forgetting","lastBuffer","initialState","activeRow","gameInProgress","typedLetters","total","accuracy","correctNums","incorrectLetters","speed","top","timer","start","elapsed","reducer","produce","draft","action","type","currentTime","numRows","letters","typedLength","length","incLength","letter","console","log","lastCorWhole","lastCorPart","nums","obj","lastNum","lastBufferNum","curNum","computed","Math","max","lastForget","lastLetters","Object","keys","forEach","setCurrentTyped","addTypedLetters","currentLetters","SET_SHOW","timeMode","num","show","timeModes","setShow","combineReducers","settings","game","createStore","composeWithDevTools","applyMiddleware","store","next","dispatch","nextCalled","callNext","setInterval","Date","now","updateElapsed","duration","clearInterval","WORDSET","WORDS_DIVIDED_BY_LENGTH","getRandomFrom","array","floor","random","undefined","getRandomWords","space","words","index","word","push","map","WordDisplay","useSelector","state","WordRows","Array","_","i","WordRow","key","row","className","styles","wordsAreaContainer","useDispatch","active","useState","setWords","useEffect","set_words_for_new_game","resetTyped","setTypedLetters","handleKeyDown","e","newLetters","initNewLetters","setShowSettings","keyCode","altKey","numLetToDel","nextWordPos","slice","metaKey","manage_key_listener","window","addEventListener","removeEventListener","useRef","curCorNums","set_correct_word_nums","wordEls","nextWordEl","letCnt","corNums","incLets","curIncLets","wi","wordHasIncLet","wordEl","WordWrapper","li","isNextFocus","isCorrect","isTyped","letterEl","Letter","text","focus","ref","targetedNum","typedKey","typedNum","update_incorrect_letters","check_for_new_line","nextWord","parentNode","curWord","previousSibling","getBoundingClientRect","icrActiveRow","wordsArea","memo","children","wordWrapper","forwardRef","letterCorrect","letterIncorrect","letterFocus","icon","faInfinity","SettingsPane","settingsPane","WordRowSettings","TimeSettings","timeSettings","setting","slider","onChange","target","value","setNumRows","min","defaultValue","inputLabels","numRowLabel","sels","selIdx","indexOf","timeEl","useCallback","time","unit","timeNum","InfIcon","infIcon","timeUnit","sel","nonActive","Settings","settingsContainer","faCog","onClick","gearIcon","Stats","partialSpeed","statsCtn","SpeedIndicator","round","Timer","speedInd","speedText","speedUnit","timeLeft","timerWrapper","secToMMSS","toISOString","substr","endGameCtn","title","WrongKeys","statCtn","speedCtn","alignBtmCtn","alignBtmText","accCtn","tooltip","adjLabel","faQuestionCircle","tooltiptext","accLabel","accNum","percent","wrongKeysTargeted","wrongKeysTyped","ctn","noMissed","wrongKeysCtn","tableLabel","Table","sortedKeys","trs","sort","a","b","TableRow","table","tds","item","Game","gameStarted","gameContainer","EndGame","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d071131.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameContainer\":\"Game_gameContainer__1YQxt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"endGameCtn\":\"EndGame_endGameCtn__3vd3b\",\"title\":\"EndGame_title__YdJcC\",\"statCtn\":\"EndGame_statCtn__2KzUj\",\"alignBtmCtn\":\"EndGame_alignBtmCtn__nSNxd\",\"alignBtmText\":\"EndGame_alignBtmText__2lRiv\",\"speedText\":\"EndGame_speedText__3Jl7O\",\"speedUnit\":\"EndGame_speedUnit__M23t_\",\"noMissed\":\"EndGame_noMissed__2pcll\",\"accLabel\":\"EndGame_accLabel__1pwPl\",\"adjLabel\":\"EndGame_adjLabel__2ugbn\",\"accNum\":\"EndGame_accNum__3hm8_\",\"percent\":\"EndGame_percent__1Y851\",\"wrongKeysCtn\":\"EndGame_wrongKeysCtn__2jduQ\",\"tableLabel\":\"EndGame_tableLabel__23zRc\",\"accCtn\":\"EndGame_accCtn__2kbR7\",\"tooltip\":\"EndGame_tooltip__6eTPP\",\"tooltiptext\":\"EndGame_tooltiptext__3Fxc2\"};","import {\n    START_GAME,\n    END_GAME,\n    ICR_ACTIVE_ROW,\n    ADD_TYPED_WORDS,\n    updatePartialSpeed,\n    updateElapsed,\n    endGame,\n    updateAccuracy,\n    addTypedLetters,\n    resetIncBuffer,\n    setCurrentTyped,\n    resetLastCorNums\n} from \"../modules/game\"\nimport { setShow } from \"../modules/settings\"\n\nlet interval\nexport default (store) => (next) => (action) => {\n    const { dispatch } = store\n    let nextCalled = false\n    const callNext = () => {\n        nextCalled = true\n        next(action)\n    }\n\n    switch (action.type) {\n        case START_GAME:\n            interval = setInterval(() => {\n                let elapsed = (Date.now() - action.currentTime) / 1000\n                dispatch(updateElapsed(elapsed))\n                dispatch(updatePartialSpeed())\n                if (elapsed >= action.duration) store.dispatch(endGame())\n            }, 100)\n            break\n        \n        case END_GAME:\n            dispatch(addTypedLetters())\n            clearInterval(interval)\n            break\n        \n        case ICR_ACTIVE_ROW:\n            callNext()\n            dispatch(addTypedLetters())\n            dispatch(setCurrentTyped(''))\n            dispatch(resetLastCorNums())\n            break\n            \n        case ADD_TYPED_WORDS:\n            callNext()\n            dispatch(resetIncBuffer())\n            dispatch(updateAccuracy())\n            break\n    }\n    if(!nextCalled) callNext()\n}\n","import produce from 'immer'\n\nexport const START_GAME            = 'STARTED_GAME'\nexport const END_GAME              = 'ENDED_GAME'\nexport const ICR_ACTIVE_ROW        = 'ICR_ACTIVE_ROW'\nexport const SET_CURRENT_TYPED     = 'SET_CURRENT_TYPED'\nexport const ADD_TYPED_WORDS       = 'ADDED_TYPED_WORDS'\nexport const UPDATE_ACCURACY       = 'UPDATED_ACCURACY'\nexport const SET_CORRECT_NUMS      = 'SET_CORRECT_NUMS'\nexport const RESET_LAST_CORNUMS    = 'RESET_LAST_CORNUMS'\nexport const SET_INCORRECT_LETTERS = 'SET_INCORRECT_LETTERS'\nexport const UPDATE_PARTIAL_SPEED  = 'UPDATED_CORRECT_PARTIAL'\nexport const RESET_INC_BUFFER      = \"RESET_INC_BUFFER\"\nexport const UPDATE_ELAPSED        = 'UPDATED_ELAPSED'\n\nconst initTypedLetters = { current: '', total: '' }\nconst initCorNum       = { whole: 0, partial: 0 }\nconst initCorNums      = { current: { ...initCorNum }, last: { ...initCorNum } }\nconst initIncLetSet    = { typed: {}, targeted: {} }\nconst initIncLet       = { nonForget: { ...initIncLetSet }, forgetting: {}, lastBuffer: { ...initIncLetSet } }\nconst speed            = { whole: 0, partial: 0, top: 0 }\nconst timer            = { start: null, elapsed: 0 }\nconst initialState     = {\n    activeRow       : 0,\n    gameInProgress  : false,\n    typedLetters    : { ...initTypedLetters },\n    accuracy        : 0,\n    correctNums     : { ...initCorNums },\n    incorrectLetters: { ...initIncLet },\n    speed           : { ...speed },\n    timer           : { ...timer },\n}\n\nconst reducer = produce((draft, action = {}) => {\n    switch (action.type) {\n        case START_GAME:\n            draft.timer.start = action.currentTime\n            draft.gameInProgress = true\n            return\n\n        case END_GAME:\n            draft.gameInProgress = false\n            return\n\n        case ICR_ACTIVE_ROW:\n            draft.activeRow = (draft.activeRow + 1) % action.numRows\n            return\n\n        case SET_CURRENT_TYPED:\n            draft.typedLetters.current = action.letters\n            return\n\n        case ADD_TYPED_WORDS:\n            draft.typedLetters.total += draft.typedLetters.current\n            return\n\n        case UPDATE_ACCURACY:\n            const typedLength = draft.typedLetters.total.length\n            let incLength = 0\n            for (let letter in draft.incorrectLetters.forgetting)\n                incLength += draft.incorrectLetters.forgetting[letter]\n            console.log(incLength, typedLength)\n            draft.accuracy = (typedLength - incLength) / typedLength\n            return\n\n        case SET_CORRECT_NUMS:\n            const { whole: lastCorWhole, partial: lastCorPart } = draft.correctNums.last\n            const { whole, partial } = action.nums\n            draft.correctNums.current.whole += whole - lastCorWhole\n            draft.correctNums.current.partial += partial - lastCorPart\n\n            draft.correctNums.last = { ...action.nums }\n            return\n\n        case RESET_LAST_CORNUMS:\n            draft.correctNums.last = { ...initCorNum }\n            return\n\n        case SET_INCORRECT_LETTERS:\n            const { typed, targeted } = action.obj\n\n            for (const letter in typed) {\n                const lastNum = draft.incorrectLetters.nonForget.typed[letter] || 0\n                const lastBufferNum = draft.incorrectLetters.lastBuffer.typed[letter] || 0\n                const curNum = typed[letter]\n                const computed = lastNum + Math.max(0, curNum - lastBufferNum)\n                draft.incorrectLetters.nonForget.typed[letter] = computed \n            }\n            for (const letter in targeted) {\n                const lastNum = draft.incorrectLetters.nonForget.targeted[letter] || 0\n                const lastBufferNum = draft.incorrectLetters.lastBuffer.targeted[letter] || 0\n                const lastForget = draft.incorrectLetters.forgetting[letter] || 0 \n                const curNum = targeted[letter]\n                draft.incorrectLetters.nonForget.targeted[letter] = lastNum + Math.max(0, curNum - lastBufferNum) \n                draft.incorrectLetters.forgetting[letter] = lastForget + (curNum - lastBufferNum) \n            }\n\n            if (draft.incorrectLetters.lastBuffer.targeted) {\n                const lastLetters = Object.keys(draft.incorrectLetters.lastBuffer.targeted)\n                lastLetters.forEach(letter => {\n                    if (!targeted[letter])\n                        draft.incorrectLetters.forgetting[letter] = 0\n                })\n            }\n\n            draft.incorrectLetters.lastBuffer = { ...action.obj }\n            return\n        \n        case RESET_INC_BUFFER:\n            draft.incorrectLetters.lastBuffer = {}\n            return\n\n        case UPDATE_PARTIAL_SPEED:\n            draft.speed.partial = draft.correctNums.current.partial / draft.timer.elapsed * 60\n            return\n\n        case UPDATE_ELAPSED:\n            draft.timer.elapsed = action.elapsed\n            return\n  }\n}, initialState)\n\nexport const startGame = (currentTime, duration) => ({\n    type: START_GAME,\n    currentTime: currentTime,\n    duration: duration\n})\n\nexport const endGame = () => ({\n    type: END_GAME\n})\n\nexport const icrActiveRow = (numRows) => ({\n    type: ICR_ACTIVE_ROW,\n    numRows: numRows\n})\n\nexport const setCurrentTyped = letters => ({\n    type: SET_CURRENT_TYPED,\n    letters: letters\n})\n\nexport const addTypedLetters = currentLetters => ({\n    type: ADD_TYPED_WORDS,\n    currentLetters: currentLetters\n})\n\nexport const updateAccuracy = () => ({\n    type: UPDATE_ACCURACY\n})\n\nexport const setCorrectNums = obj => ({\n    type: SET_CORRECT_NUMS,\n    nums: obj\n})\n\nexport const resetLastCorNums = () => ({\n    type: RESET_LAST_CORNUMS\n})\n\nexport const setIncorrectLetters = obj => ({\n    type: SET_INCORRECT_LETTERS,\n    obj: obj\n})\n\nexport const resetIncBuffer = () => ({\n    type: RESET_INC_BUFFER,\n})\n       \nexport const updatePartialSpeed = () => ({\n    type: UPDATE_PARTIAL_SPEED\n})\n\nexport const updateElapsed = elapsed => ({\n    type: UPDATE_ELAPSED,\n    elapsed: elapsed\n})\n\nexport default reducer","import produce from 'immer'\n\nconst SET_TIME_MODE = 'settings/SET_TIME_MODE'\nconst SET_NUM_ROWS  = 'settings/SET_NUM_ROWS'\nconst SET_SHOW      = 'settings/SET_SHOW'\n\nconst initialState = {\n  show: false,\n  timeMode: 30,\n  timeModes: [10, 30, 60, 120, 0],\n  numRows: 2\n}\n\nexport default produce((draft, action = {}) => {\n  switch (action.type) {\n    case SET_TIME_MODE:\n      draft.timeMode = action.timeMode\n      return\n    case SET_NUM_ROWS:\n      draft.numRows = action.num\n      return\n    case SET_SHOW:\n      draft.show = action.show\n      return\n  }\n}, initialState)\n\nexport const setTimeMode = secs => ({\n  type: SET_TIME_MODE,\n  timeMode: secs\n}) \n\nexport const setNumRows = num => ({\n  type: SET_NUM_ROWS,\n  num: num\n}) \n\nexport const setShow = show => ({\n  type: SET_SHOW,\n  show: show\n}) \n","import { createStore, applyMiddleware, combineReducers } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\n\nimport middleware from \"./middleware/middleware\"\nimport settings from \"./modules/settings\"\nimport game from \"./modules/game\"\n\nconst reducer = combineReducers({\n    settings,\n    game,\n})\n\nexport default createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(middleware))\n)\n","const WORDSET = [\"she\", \"be\", \"saw\", \"together\", \"its\", \"carry\", \"go\", \"now\", \"learn\", \"country\", \"open\", \"water\", \"light\", \"live\", \"car\", \"before\", \"letter\", \"same\", \"write\", \"were\", \"been\", \"set\", \"from\", \"mountain\", \"will\", \"open\", \"through\", \"here\", \"can\", \"few\", \"under\", \"just\", \"write\", \"get\", \"begin\", \"day\", \"the\", \"it\", \"move\", \"now\", \"like\", \"he\", \"sea\", \"she\", \"America\", \"our\", \"year\", \"call\", \"often\", \"near\", \"line\", \"both\", \"begin\", \"left\", \"below\", \"need\", \"into\", \"turn\", \"say\", \"group\", \"move\", \"together\", \"different\", \"both\", \"song\", \"earth\", \"her\", \"mean\", \"add\", \"after\", \"children\", \"saw\", \"made\", \"paper\", \"start\", \"try\", \"sometimes\", \"line\", \"not\", \"its\", \"through\", \"well\", \"call\", \"being\", \"sentence\", \"does\", \"might\", \"still\", \"said\", \"are\", \"every\", \"might\", \"important\", \"without\", \"end\", \"girl\", \"America\", \"about\", \"face\", \"look\", \"children\", \"is\", \"say\", \"his\", \"another\", \"carry\", \"look\", \"along\", \"young\", \"being\", \"state\", \"almost\", \"boy\", \"who\", \"Indian\", \"hard\", \"face\", \"by\", \"their\", \"feet\", \"add\", \"said\", \"first\", \"man\", \"very\", \"never\", \"were\", \"give\", \"get\", \"it\", \"cut\", \"also\", \"really\", \"watch\", \"sometimes\", \"leave\", \"some\", \"give\", \"there\", \"spell\", \"play\", \"last\", \"here\", \"study\", \"on\", \"from\", \"girl\", \"never\", \"small\", \"would\", \"quick\", \"found\", \"mile\", \"turn\", \"read\", \"that\", \"part\", \"thought\", \"will\", \"below\", \"too\", \"many\", \"because\", \"too\", \"left\", \"show\", \"let\", \"men\", \"many\", \"air\", \"sound\", \"river\", \"change\", \"light\", \"each\", \"day\", \"much\", \"put\", \"far\", \"Indian\", \"small\", \"world\", \"have\", \"turn\", \"an\", \"father\", \"three\", \"about\", \"would\", \"have\", \"only\", \"again\", \"long\", \"country\", \"again\", \"find\", \"learn\", \"took\", \"very\", \"people\", \"large\", \"was\", \"is\", \"it's\", \"look\", \"be\", \"above\", \"away\", \"quick\", \"other\", \"often\", \"number\", \"us\", \"number\", \"night\", \"enough\", \"as\", \"be\", \"through\", \"show\", \"and\", \"story\", \"sea\", \"is\", \"so\", \"animal\", \"work\", \"second\", \"before\", \"old\", \"take\", \"talk\", \"oil\", \"been\", \"how\", \"feet\", \"word\", \"long\", \"sentence\", \"one\", \"come\", \"your\", \"high\", \"quickly\", \"almost\", \"not\", \"now\", \"back\", \"him\", \"stop\", \"above\", \"page\", \"the\", \"any\", \"other\", \"other\", \"air\", \"thing\", \"would\", \"how\", \"miss\", \"hand\", \"mean\", \"them\", \"some\", \"by\", \"life\", \"began\", \"came\", \"us\", \"try\", \"year\", \"part\", \"even\", \"hear\", \"mother\", \"school\", \"run\", \"next\", \"example\", \"answer\", \"it\", \"out\", \"that\", \"walk\", \"use\", \"say\", \"oil\", \"no\", \"back\", \"along\", \"three\", \"leave\", \"does\", \"home\", \"an\", \"could\", \"tell\", \"had\", \"house\", \"close\", \"very\", \"if\", \"does\", \"point\", \"your\", \"eat\", \"thought\", \"away\", \"water\", \"just\", \"did\", \"at\", \"land\", \"see\", \"without\", \"young\", \"he\", \"at\", \"went\", \"took\", \"always\", \"with\", \"need\", \"later\", \"way\", \"cut\", \"right\", \"near\", \"where\", \"feet\", \"were\", \"start\", \"small\", \"miss\", \"study\", \"did\", \"another\", \"down\", \"day\"]\nconst WORDS_DIVIDED_BY_LENGTH = {}\n\nWORDSET.forEach(word => {\n  if (!WORDS_DIVIDED_BY_LENGTH[word.length])\n    WORDS_DIVIDED_BY_LENGTH[word.length] = []\n  \n  WORDS_DIVIDED_BY_LENGTH[word.length].push(word)\n})\n\n\nfunction getRandomFrom(array) {\n  return array\n    ? array[Math.floor(Math.random() * array.length)]\n    : undefined\n}\n\nexport function getRandomWords({ num, space, length }) {\n  num = num ? num : 1\n  let words = []\n  for (let index = 0; index < num; index++) {\n    let word = length\n    ? getRandomFrom(WORDS_DIVIDED_BY_LENGTH[length])\n    : getRandomFrom(WORDSET)\n    words.push(word)\n  }\n  if (space)\n    words = words.map(word => word + ' ')\n  return words\n}\n\nexport function addWordsToArr(arr, num) {\n  let result = [...arr]\n  for (let index = 0; index < num; index++) {\n    result.push(getRandomWords() + ' ')\n  }\n  return result\n}\n","import React, { useEffect, useState, useRef, memo, forwardRef } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport styles from \"./WordDisplay.module.sass\"\nimport { getRandomWords } from \"./shared/helpers\"\nimport {\n    startGame,\n    icrActiveRow,\n    setCurrentTyped,\n    addTypedLetters,\n    setCorrectNums,\n    resetLastCorNums,\n    setIncorrectLetters\n} from \"../ducks/modules/game\"\nimport { setShow as setShowSettings } from \"../ducks/modules/settings\"\n\nexport default function WordDisplay() {\n    const numRows = useSelector((state) => state.settings.numRows)\n    const WordRows = [...Array(numRows)].map((_, i) => (\n        <WordRow key={i} row={i} />\n    ))\n    return <div className={styles.wordsAreaContainer}>{WordRows}</div>\n}\n\nfunction WordRow({ row }) {\n    const dispatch = useDispatch()\n    const activeRow = useSelector((state) => state.game.activeRow)\n    const gameInProgress = useSelector((state) => state.game.gameInProgress)\n    const active = row === activeRow\n\n    const [words, setWords] = useState([])\n    useEffect(set_words_for_new_game => {\n        if (!gameInProgress) {\n            resetTyped()\n            setWords(getRandomWords({ num: 30, space: true }))\n        }\n    }, [gameInProgress])\n\n    // const [typedLetters, setTypedLetters] = React.useState([])\n    const timeMode = useSelector((state) => state.settings.timeMode)\n    const typedLetters = useSelector((state) => state.game.typedLetters.current)\n    const setTypedLetters = (letters) => dispatch(setCurrentTyped(letters))\n    const resetTyped = () => setTypedLetters(\"\")\n    useEffect(manage_key_listener => {\n        if (active) window.addEventListener(\"keydown\", handleKeyDown)\n        return () => {\n            window.removeEventListener(\"keydown\", handleKeyDown)\n        }\n    })\n    function handleKeyDown(e) {\n        let newLetters\n        const initNewLetters = () => (newLetters = typedLetters)\n\n        if (e.key.length === 1) {\n            initNewLetters()\n            newLetters += e.key\n            if (!gameInProgress) {\n                dispatch(setShowSettings(false))\n                if (timeMode !== 0) dispatch(startGame(Date.now(), timeMode))\n            }\n        } else if (e.keyCode === 8) {\n            initNewLetters()\n            // 8 === back space\n            if (e.altKey) {\n                let numLetToDel =\n                    nextWordPos.current.letter === 0\n                        ? words[Math.max(0, nextWordPos.current.word - 1)]\n                              .length\n                        : nextWordPos.current.letter\n                newLetters = newLetters.slice(\n                    0,\n                    newLetters.length - numLetToDel\n                )\n            } else if (e.metaKey) {\n                newLetters = \"\"\n            } else {\n                newLetters = newLetters.slice(0, -1)\n            }\n        }\n        if (newLetters !== undefined) setTypedLetters(newLetters)\n    }\n\n    const nextWordPos = useRef({ word: 0, letter: 0 })\n    const curCorNums = useRef({ whole: 0, partial: 0 })\n    useEffect(set_correct_word_nums => {\n        if (!active) return\n        dispatch(setCorrectNums(curCorNums.current))\n    }, [typedLetters])\n\n    const numRows = useSelector((state) => state.settings.numRows)\n    const nextWordEl = useRef()\n\n    /*---------------\n    Compute letters\n    ---------------*/\n    let letCnt = 0\n    let wordEls\n    const corNums = { whole: 0, partial: 0 }\n    const incLets = { typed: {}, targeted: {} }\n    const curIncLets = useRef({ typed: {}, targeted: {} })\n    if (active) {\n        wordEls = words.map((word, wi) => {\n            let wordHasIncLet = false\n            const wordEl = (\n                <WordWrapper key={wi}>\n                    {[...word].map((letter, li) => {\n                        let isNextFocus = letCnt === typedLetters.length\n                        let isCorrect = letter === typedLetters[letCnt]\n                        let isTyped = typedLetters[letCnt] ? true : false\n                        let letterEl = (\n                            <Letter\n                                text={letter}\n                                key={li}\n                                isCorrect={isTyped ? isCorrect : undefined}\n                                focus={active ? isNextFocus : false}\n                                ref={isNextFocus ? nextWordEl : null}\n                            />\n                        )\n                        letCnt++\n                        if (isNextFocus) {\n                            nextWordPos.current = { word: wi, letter: li }\n                        }\n                        if (isCorrect) {\n                            corNums.partial += 1 / word.length\n                        } else {\n                            wordHasIncLet = true\n                            if (typedLetters[letCnt - 1]) {\n                                let targetedNum = incLets.targeted[letter] || 0\n                                incLets.targeted[letter] = targetedNum + 1\n                                let typedKey = typedLetters[letCnt - 1]\n                                let typedNum = incLets.typed[typedKey] || 0\n                                incLets.typed[typedKey] = typedNum + 1\n                            }\n                        }\n                        return letterEl\n                    })}\n                </WordWrapper>\n            )\n            if (!wordHasIncLet) corNums.whole++\n            return wordEl\n        })\n    } else {\n        wordEls = words.map((word, wi) => (\n            <WordWrapper key={wi}>\n                {[...word].map((letter, li) => (\n                    <Letter text={letter} key={li} />\n                ))}\n            </WordWrapper>\n        ))\n    }\n    curCorNums.current = corNums\n    curIncLets.current = incLets\n    useEffect(update_incorrect_letters => {\n        if (active) {\n            dispatch(setIncorrectLetters(curIncLets.current))\n        }\n    })\n\n    useEffect(check_for_new_line => {\n        if (!active) return\n        let nextWord = nextWordEl.current?.parentNode\n        let curWord = nextWordEl.current?.parentNode?.previousSibling\n        if (!curWord) return\n        //if new line\n        if (\n            nextWord.getBoundingClientRect().top !==\n            curWord.getBoundingClientRect().top\n        ) {\n            window.removeEventListener(\"keydown\", handleKeyDown)\n            dispatch(icrActiveRow(numRows))\n            setWords(getRandomWords({ num: 30, space: true }))\n        }\n    }, [typedLetters])\n\n    return <div className={styles.wordsArea}>{wordEls}</div>\n}\nconst WordWrapper = memo(({ children }) => {\n    return <div className={styles.wordWrapper}>{children}</div>\n})\n\nconst getLetterTemplate = ({ text, isCorrect, focus }, ref) => (\n    <div\n        className={`${styles.letter}\n          ${text === \" \" ? styles.space : \"\"}\n          ${\n              isCorrect === undefined\n                  ? \"\"\n                  : isCorrect\n                  ? styles.letterCorrect\n                  : styles.letterIncorrect\n          }\n          ${focus ? styles.letterFocus : \"\"}\n          `}\n        ref={ref}\n    >\n        {text}\n    </div>\n)\nconst Letter = memo(forwardRef(getLetterTemplate))\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfinity } from '@fortawesome/free-solid-svg-icons'\nimport styles from \"./InfIcon.module.sass\"\n\nexport default ({ className }) => (\n  <FontAwesomeIcon icon={faInfinity} className={styles.icon} />\n)","import React, {\n  useState,\n  useEffect,\n  useRef,\n  useReducer,\n  useContext,\n  useCallback\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\n\nimport { setTimeMode, setNumRows } from '../ducks/modules/settings'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\nimport InfIcon from './shared/InfIcon'\nimport styles from './Settings.module.sass'\n\nimport { setShow } from './../ducks/modules/settings'\n\nfunction Settings() {\n  const dispatch = useDispatch()\n  const show = useSelector(state => state.settings.show)\n  const toggleShow = () => dispatch(setShow(!show))\n\n  return (\n    <div className={styles.settingsContainer}>\n      <FontAwesomeIcon icon={faCog} onClick={toggleShow} className={styles.gearIcon} />\n      {show ? <SettingsPane/ > : null}\n    </div>\n  )\n}\n\nfunction SettingsPane() {\n  return (\n    <div className={styles.settingsPane}>\n      <WordRowSettings />\n      <TimeSettings className={styles.timeSettings}></TimeSettings>\n    </div>\n  )\n}\n\nfunction WordRowSettings() {\n  const gameInProgress = useSelector(state => state.game.gameInProgress)\n  const dispatch = useDispatch()\n  const numRows = useSelector(state => state.settings.numRows)\n\n  function handleChange(e) {\n    let num = Math.floor(e.target.value/10)\n    if(!gameInProgress)\n      dispatch(setNumRows(num))\n  }\n  \n  return (\n    <div className={styles.setting}>\n        <input className={styles.slider}\n        type='range' onChange={handleChange}\n        min={10} max={100} defaultValue={numRows*10}/>\n        <div className={styles.inputLabels}>\n            <div className={styles.numRowLabel}>Rows of words</div>\n            <div>{numRows}</div>\n        </div>\n    </div>\n  )\n}\n\nfunction TimeSettings() {\n    const dispatch = useDispatch()\n    const gameInProgress = useSelector(state => state.game.gameInProgress)\n    const timeMode = useSelector(state => state.settings.timeMode)\n    const sels = useSelector(state => state.settings.timeModes)\n    const selIdx = sels.indexOf(timeMode)\n\n    function handleSlide(e) {\n        if(!gameInProgress)\n        dispatch(setTimeMode(sels[e.target.value]))\n    }\n        \n    const timeEl = useCallback((time) => {\n        let unit\n        let num\n        if (time === 0) {\n        unit = 'infinity'\n        } else if (time < 60) {\n        unit = 'sec'\n        num = time\n        } else if (time >= 60) {\n        unit = 'min'\n        num = `${Math.floor(time / 60)}${time % 60 ? ':' + ('0' + time % 60).slice(-2) : ''}`\n        }\n        return (\n        <div className={styles.timeNum}>\n            {time === 0 ? <InfIcon className={styles.infIcon}/> : num}\n            <div className={styles.timeUnit}>{unit}</div>\n        </div>\n        )\n    }, [])\n\n    return (\n        <div>\n        <input onChange={handleSlide} type=\"range\" \n            min={0} max={sels.length - 1} value={selIdx}\n            className={styles.slider}\n        />\n        <div className={styles.inputLabels}>\n            {\n            sels.map((sel, i) => (\n                <div\n                className={`${styles.time}\n                ${i === selIdx ? '' : styles.nonActive}`}\n                key={i}\n                >\n                { timeEl(sel) }\n                </div>\n            ))\n            }\n        </div>\n        </div>\n    )\n}\n\nexport default Settings\n","import React, { useEffect } from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\nimport styles from './Stats.module.sass'\nimport InfIcon from './shared/InfIcon'\n\nexport default function Stats() {\n  const partialSpeed = useSelector(state => state.game.speed.partial)\n  return (\n    <div className={styles.statsCtn}>\n      <SpeedIndicator\n        speed={Math.round(partialSpeed)}\n        type={'current'} />\n      <Timer />\n    </div>\n  )\n}\n\nfunction SpeedIndicator({ speed, type }) {\n  return (\n    <div className={styles.speedInd}>\n      <div>\n        <div className={styles.speedText}>{speed}</div>\n      </div>\n      <div className={styles.speedUnit}>\n        <div>{type}</div>\n        <div>WPM</div>\n      </div>\n    </div>\n  )\n}\n\nfunction Timer() {\n  const dispatch = useDispatch()\n  let timeMode = useSelector(state => state.settings.timeMode)\n  let elapsed = useSelector(state => state.game.timer.elapsed)\n  let timeLeft = timeMode - elapsed\n  return (\n    <div className={styles.timerWrapper}>\n      <div className={styles.timer}>\n        {timeMode === 0\n          ? (<>00: <InfIcon /></>)\n          : elapsed > 0 ? secToMMSS(timeLeft) : secToMMSS(timeMode)}\n      </div>\n    </div>\n  )\n}\n\nfunction secToMMSS(time) {\n  return (new Date(time * 1000).toISOString().substr(11, 8)).slice(-5)\n}","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\"\nimport styles from \"./EndGame.module.sass\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons'\n\nexport default function () {\n    return (\n        <div className={styles.endGameCtn}>\n            <div className={styles.title}>Stats</div>\n            <Stats />\n            <WrongKeys />\n        </div>\n    );\n}\n\nfunction Stats() {\n    const speed = useSelector((state) => state.game.speed.partial)\n    const accuracy = useSelector(state => state.game.accuracy)\n    return (\n        <div className={styles.statCtn}>\n            <div className={`${styles.speedCtn} ${styles.alignBtmCtn}`}>\n                <span className={`${styles.speedText} ${styles.alignBtmText}`}>{Math.floor(speed)}</span>\n                <span className={styles.speedUnit}>WPM</span>\n            </div>\n            <div className={`${styles.alignBtmCtn} ${styles.accCtn}`}>\n                <div className={`${styles.tooltip} ${styles.adjLabel}`}>\n                    (adjusted) <FontAwesomeIcon icon={faQuestionCircle} />\n                    <div className={styles.tooltiptext}>If you missed a key and corrected it, it shall not count against you.</div>     \n                </div>\n                <div className={`${styles.accLabel}`}>Accuracy</div>\n                <div className={`${styles.accNum}`}>{Math.floor(accuracy * 100)}<span className={styles.percent}>%</span></div>\n            </div>\n        </div>\n    )\n}\n\nfunction WrongKeys() {\n    const wrongKeysTargeted = useSelector(state => state.game.incorrectLetters.nonForget.targeted)\n    const wrongKeysTyped = useSelector(state => state.game.incorrectLetters.nonForget.typed) \n\n    return (\n        < div className={styles.ctn} >\n            {\n                Object.keys(wrongKeysTargeted).length === 0\n                    ? (\n                        <div className={styles.noMissed}>You did not miss-type a single key!</div>\n                    ) : (\n                        <>\n                        <div className={styles.wrongKeysCtn}>\n                            <div className={styles.tableLabel}>Top characters you typed wrong</div>\n                            <Table obj={wrongKeysTargeted} />\n                        </div>\n                        <div className={styles.wrongKeysCtn}>\n                            <div className={styles.tableLabel}>Keys you miss-clicked</div>\n                            <Table obj={wrongKeysTyped} />\n                        </div>\n                        </>\n                    )\n            }\n        </div >\n    )\n}\n\nfunction Table({ obj }) {\n    let trs = []\n    let sortedKeys\n    if (obj) {\n        sortedKeys = Object.keys(obj).sort((a, b) => obj[b] - obj[a])\n        for (let i = 0; i < 3; i++) {\n            let key = sortedKeys[i]\n            const num = obj[key]\n            if (key === ' ') key = 'space'\n            if (num > 0)\n                trs.push(\n                    <TableRow array={[key, num > 5 ? num : '<5']} key={i} /> )\n        }\n    }\n    return (\n        <table className={styles.table}>\n            <thead>\n                <tr>\n                    <td>key</td>\n                    <td>#</td>\n                </tr>\n            </thead>\n            <tbody>\n                {trs}\n            </tbody>\n        </table> \n    )\n}\n\nfunction TableRow({ array }) {\n    const tds = array.map((item, i) => (\n            <td key={i}>{item}</td>\n    ))\n    return (\n        <tr>\n            {tds}\n        </tr>\n    )\n}\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport styles from './Game.module.sass'\nimport WordDisplay from './WordDisplay'\nimport Settings from './Settings'\nimport Stats from './Stats'\nimport EndGame from './EndGame'\n\nexport default function Game() {\n  const gameInProgress = useSelector(state => state.game.gameInProgress)\n  const startTime = useSelector(state => state.game.timer.start)\n  const gameStarted = startTime !== null\n\n  return (\n    <div className={styles.gameContainer}>\n      <Settings />\n      {!gameStarted || gameInProgress ?\n      <>\n        <WordDisplay />\n        <Stats />\n      </> : <EndGame />}\n      {/* <EndGame /> */}\n    </div>\n  )\n}","import React from 'react'\nimport { Provider } from 'react-redux'\nimport store from './ducks/store'\nimport Game from './components/Game'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Game />\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"Settings_settingsContainer__1trfE\",\"gearIcon\":\"Settings_gearIcon__2pZYA\",\"settingsPane\":\"Settings_settingsPane__2DYnl\",\"setting\":\"Settings_setting__2pUd6\",\"numRowLabel\":\"Settings_numRowLabel__ki0sd\",\"inputLabels\":\"Settings_inputLabels__3UIXH\",\"timeNum\":\"Settings_timeNum__2uOGw\",\"infIcon\":\"Settings_infIcon__oawg8\",\"timeUnit\":\"Settings_timeUnit__2Kxw-\",\"nonActive\":\"Settings_nonActive__2qYRX\",\"slider\":\"Settings_slider__1hNSC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordsAreaContainer\":\"WordDisplay_wordsAreaContainer__3Gml0\",\"wordsArea\":\"WordDisplay_wordsArea__UmGKS\",\"wordWrapper\":\"WordDisplay_wordWrapper__2ithC\",\"letter\":\"WordDisplay_letter__2xECK\",\"letterFocus\":\"WordDisplay_letterFocus__ueSEZ\",\"letterCorrect\":\"WordDisplay_letterCorrect__ao7E3\",\"growUp\":\"WordDisplay_growUp__3SXeV\",\"letterIncorrect\":\"WordDisplay_letterIncorrect__Em8Ep\",\"space\":\"WordDisplay_space__11U-Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsCtn\":\"Stats_statsCtn__3OKAs\",\"speedInd\":\"Stats_speedInd__2iNiH\",\"speedText\":\"Stats_speedText__1jV10\",\"speedUnit\":\"Stats_speedUnit__3UIOo\",\"timerWrapper\":\"Stats_timerWrapper__q3xy6\",\"timer\":\"Stats_timer__2QPlt\"};"],"sourceRoot":""}